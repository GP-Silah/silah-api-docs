{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "deprecated": true,
        "description": "This is the default root endpoint generated by NestJS. It returns a static test message and is not part of the real Silah API.",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A \"Hello, World!\" message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Hello, World!"
                }
              }
            }
          }
        },
        "summary": "Not a usable endpoint",
        "tags": [
          "Default"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Check API health status",
        "tags": [
          "Health"
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User signed up successfully. JWT sent in cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Signup successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation or conflict",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "These categories are invalid: Cleaning, Laundry",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "NID already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "CRN already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "Email already exists",
                        "error": "Bad Request"
                      }
                    }
                  ]
                },
                "examples": {
                  "categories": {
                    "summary": "Invalid Categories",
                    "value": {
                      "statusCode": 400,
                      "message": "These categories are invalid: Cleaning, Laundry",
                      "error": "Bad Request"
                    }
                  },
                  "nid": {
                    "summary": "NID already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "NID already exists",
                      "error": "Bad Request"
                    }
                  },
                  "crn": {
                    "summary": "CRN already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "CRN already exists",
                      "error": "Bad Request"
                    }
                  },
                  "email": {
                    "summary": "Email already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "Email already exists",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Commercial Registration not found (from Wathiq API).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "code": "404.2.1",
                    "message": "No Results Found"
                  }
                },
                "examples": {
                  "crnNotFound": {
                    "summary": "CRN not found in Wathiq",
                    "value": {
                      "code": "404.2.1",
                      "message": "No Results Found"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Registers a new user and returns a JWT token in a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "Either \"email\" or \"crn\" must be provided, but not both.",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "email",
                      "password"
                    ],
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "crn",
                      "password"
                    ],
                    "properties": {
                      "crn": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "loginWithEmail": {
                  "summary": "Login using email and password",
                  "value": {
                    "email": "user@example.com",
                    "password": "securePassword123"
                  }
                },
                "loginWithCrn": {
                  "summary": "Login using CRN and password",
                  "value": {
                    "crn": "1234567890",
                    "password": "securePassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Login successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – validation or authentication failure",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user does not exist in the system",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "The email or CRN exists, but the password is incorrect",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid credentials",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Login user and send back JWT token as a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Successfully logged out"
                }
              }
            }
          }
        },
        "summary": "Logout user by clearing token cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/verify-email": {
      "post": {
        "description": "This endpoint should be called when the user clicks the verification button which is after clicking the link in their email.<br> So this endpoint should be called from the `/verify-email` route in the frontend, remember to pass the token as a query parameter (so the link will be `/verify-email?token=`).",
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "JWT token from email link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email verified successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or already verified",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user not found or already verified",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found or already verified",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "Invalid or expired token",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid or expired verification token",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify user email using token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/resend-verification-email": {
      "post": {
        "description": "This endpoint allows users to request a new verification email if they missed the original one or if the token expired. <br>If the you received \"Invalid or expired verification token\" error you should call this endpoint to resend the email. ",
        "operationId": "AuthController_resendVerificationEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email to resend verification to",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "example@email.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Verification email resent successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Email already verified",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Resend verification email to user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/request-password-reset": {
      "post": {
        "description": "This endpoint sends a password reset link to the user's email address.<br><br>\n            It is used in two cases:<br>\n            - If the user clicks the \"Forgot Password?\" button.<br>\n            - If the user previously requested a reset link but the 5-minute token has expired.<br><br>\n            Note: The token will only be sent if the email exists and is verified. For security reasons, we always return the same success message, regardless of whether the user exists or is verified.",
        "operationId": "AuthController_requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The email address of the user who wants to reset their password.",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "user@example.com"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reset password email sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Password reset email sent successfully"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send reset password email",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 500,
                    "message": "Failed to send reset password email"
                  }
                }
              }
            }
          }
        },
        "summary": "Request password reset link",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "description": "This endpoint is used after the user clicks the password reset link from their email.<br><br>\n    It should be triggered from the frontend's `/reset-password` route.<br>\n    The token should be passed as a query parameter in the URL.<br><br>\n    The body must include a new password that is between 8 and 28 characters long.",
        "operationId": "AuthController_resetPassword",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The JWT token sent in the reset password email. This must be passed as a query parameter.",
            "schema": {
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new password to set for the user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Password reset successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or validation error in request body.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid or expired reset password token"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found (after token is verified).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          }
        },
        "summary": "Reset user password using token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/switch-role": {
      "patch": {
        "operationId": "AuthController_switchUserRole",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token regenerated with updated role",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Role switched successfully",
                    "newRole": "SUPPLIER"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unexpected role: GUEST should never reach this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 500,
                    "message": "Unexpected role: GUEST should never reach this endpoint",
                    "error": "Internal Server Error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Switch user role (BUYER ⇌ SUPPLIER)",
        "tags": [
          "Auth"
        ]
      }
    },
    "/users/email/{email}": {
      "get": {
        "description": "Fetches a single user using their email address.",
        "operationId": "UserController_getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "description": "Email address of the user",
            "schema": {
              "example": "example@email.com",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/crn/{crn}": {
      "get": {
        "description": "Fetches a user using their unique CRN.",
        "operationId": "UserController_getUserByCRN",
        "parameters": [
          {
            "name": "crn",
            "required": true,
            "in": "path",
            "description": "Customer Registration Number of the user",
            "schema": {
              "example": "0123456789",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user by their CRN",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/name": {
      "get": {
        "description": "Returns a list of users that match the provided name.",
        "operationId": "UserController_getUserByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name (or partial name) to search users by",
            "schema": {
              "example": "Sarah",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Name parameter is required",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No users found with the name",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Returns the currently authenticated user's data.",
        "operationId": "UserController_getCurrentUserData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current user",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates the currently authenticated user's profile information.",
        "operationId": "UserController_updateCurrentUserData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "User data to update (you don't have to not send all fields, only the ones you want to change will be updated).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "These categories are invalid: Hi, LOL",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/profile-picture": {
      "post": {
        "description": "Uploads a new profile picture for the authenticated user and updates their record. Replaces the previous picture if it exists.<br><strong>Note:</strong> The file must be an image (PNG, JPEG, WebP) and cannot exceed 5MB in size.<br><strong>IMPORTANT:</strong> Please ensure that uploaded images comply with Islamic laws. This means avoiding haram content such as music-related images, depictions of women's bodies (even hands), or any illustrations of living beings (humans, animals, etc.) whether drawn or digital.",
        "operationId": "UserController_updateProfilePicture",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Profile picture file to upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Profile picture updated successfully",
                    "pfpFileName": "user-avatar/12345.png"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. File missing or invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "No file provided or invalid file type",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found or profile picture cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update user profile picture",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Deletes the authenticated user's current profile picture and replaces it with a default avatar.",
        "operationId": "UserController_deleteProfilePicture",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Profile picture deleted successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found or already has the default profile picture",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Profile picture not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete current user profile picture",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/profile-picture": {
      "get": {
        "description": "Retrieves the URL of a user's profile picture that is stored on R2. Throws a 404 error if the user or their profile picture does not exist.",
        "operationId": "UserController_getUserProfilePictureUrl",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the user whose profile picture URL is being retrieved",
            "schema": {
              "example": "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "pfpUrl": "https://cdn.example.com/pfp/USER_ID.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250101T000000Z&X-Amz-Expires=3600&X-Amz-Signature=REDACTED"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or profile picture not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Profile picture not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user's profile picture URL",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/profile-pictures/batch": {
      "post": {
        "description": "Retrieves the profile picture URLs for multiple users by their IDs. Only valid UUIDs are considered.",
        "operationId": "UserController_getUsersProfilePicturesUrls",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Array of user IDs to retrieve profile picture URLs for",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "example": [
                      "a3e1c9f0-1234-5678-90ab-1c2d3e4f5678",
                      "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789"
                    ]
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture URLs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "a3e1c9f0-1234-5678-90ab-1c2d3e4f5678",
                      "pfpUrl": "https://cdn.example.com/pfp/USER_ID.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250101T000000Z&X-Amz-Expires=3600&X-Amz-Signature=REDACTED"
                    },
                    {
                      "id": "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789",
                      "pfpUrl": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "No user IDs provided",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No users found with the provided IDs",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get profile pictures for multiple users",
        "tags": [
          "Users"
        ]
      }
    },
    "/buyers/me": {
      "get": {
        "description": "Returns the currently authenticated buyer's user details and saved card information (if available).",
        "operationId": "BuyerController_getCurrentBuyerData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current buyer data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuyerResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Buyer not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current buyer data",
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/me/card": {
      "get": {
        "description": "Returns the saved card of the currently authenticated buyer. If the buyer has no card, returns `{ message: 'No card found', card: null }`.",
        "operationId": "BuyerController_getCurrentBuyerCard",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Buyer card retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardDetailsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No card found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "No card found",
                    "card": null
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current buyer card",
        "tags": [
          "Buyers"
        ]
      },
      "put": {
        "description": "Creates or replaces the authenticated buyer's card using Tap tokenization.<br>If a card already exists, it will be deleted from Tap and replaced with the new one.",
        "operationId": "BuyerController_saveOrReplaceCurrentBuyerCard",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Card details provided from Tap tokenization",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Card saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Card saved successfully",
                    "card": {
                      "id": "f1a2b3c4-d5e6-7890-ab12-34567890cdef",
                      "tapCardId": "card_abc123xyz",
                      "cardHolderName": "Norah Alqahtani",
                      "last4": "4242",
                      "brand": "Visa",
                      "expMonth": 12,
                      "expYear": 2028
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid Tap token",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Save or replace current buyer card",
        "tags": [
          "Buyers"
        ]
      },
      "delete": {
        "description": "Deletes the authenticated buyer's saved card from Tap and the database.",
        "operationId": "BuyerController_deleteCurrentBuyerCard",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Card deleted successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No card found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No card found for this buyer",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete current buyer card",
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/wishlist": {
      "get": {
        "deprecated": true,
        "description": "This endpoint is a placeholder for future implementation and is not yet functional.",
        "operationId": "BuyerController_getWishlist",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Not yet implemented",
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/wishlist/{itemId}": {
      "post": {
        "deprecated": true,
        "description": "This endpoint is a placeholder for future implementation and is not yet functional.",
        "operationId": "BuyerController_addToWishlist",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "Not yet implemented",
        "tags": [
          "Buyers"
        ]
      },
      "delete": {
        "deprecated": true,
        "description": "This endpoint is a placeholder for future implementation and is not yet functional.",
        "operationId": "BuyerController_removeFromWishlist",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "Not yet implemented",
        "tags": [
          "Buyers"
        ]
      }
    },
    "/suppliers/me": {
      "get": {
        "description": "Retrieves the supplier data of the authenticated user. Includes linked user information.",
        "operationId": "SupplierController_getSupplierData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved supplier profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found for the given user.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier with id 9932-we432 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current supplier profile",
        "tags": [
          "Suppliers"
        ]
      },
      "patch": {
        "description": "Allows the authenticated supplier to update their profile information such as store status, store closed message, store bio, banner filename, and delivery fees. Only supplier-related fields can be updated.",
        "operationId": "SupplierController_updateSupplierData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Supplier fields that can be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSupplierDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supplier profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found for the given user.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier with id 9932-we432 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update current supplier profile",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/store": {
      "get": {
        "description": "Retrieves the supplier data of the authenticated user. Includes linked user information.",
        "operationId": "SupplierController_updateSupplierStoreData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved supplier profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found for the given user.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier with id 9932-we432 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current supplier profile",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/favorite-categories": {
      "get": {
        "description": "Retrieves the list of favorite subcategories for the authenticated supplier. Each item contains the category ID and name.",
        "operationId": "SupplierController_getFavoriteCategories",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favorite categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 16
                      },
                      "name": {
                        "type": "string",
                        "example": "Animal Feed"
                      }
                    }
                  },
                  "example": [
                    {
                      "id": 16,
                      "name": "Animal Feed"
                    },
                    {
                      "id": 33,
                      "name": "Jewelry & Watches"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found when fetching favorite categories.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found when fetching favorite categories",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get supplier favorite categories",
        "tags": [
          "Suppliers"
        ]
      },
      "patch": {
        "description": "Adds a category to the supplier's favorite categories if not already present, or removes it if already present. Returns a message and updated favorite categories list.",
        "operationId": "SupplierController_toggleFavoriteCategory",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "categoryId": {
                    "type": "number",
                    "description": "The ID of the category to toggle in favorites",
                    "example": 16
                  }
                },
                "required": [
                  "categoryId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully toggled favorite category.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Category added to favorites."
                    },
                    "favoriteCategories": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 16
                          },
                          "name": {
                            "type": "string",
                            "example": "Animal Feed"
                          }
                        }
                      },
                      "example": [
                        {
                          "id": 16,
                          "name": "Animal Feed"
                        },
                        {
                          "id": 33,
                          "name": "Jewelry & Watches"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid category ID provided or category does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "Invalid category ID: abc123 (must be a number)",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "Category with id 9999 does not exist",
                        "error": "Bad Request"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Toggle a favorite category for supplier",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/plan": {
      "get": {
        "description": "Retrieves the current subscription plan of the authenticated supplier.",
        "operationId": "SupplierController_getSupplierPlan",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved supplier plan.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plan": {
                      "type": "string",
                      "enum": [
                        "BASIC",
                        "PREMIUM"
                      ],
                      "example": "PREMIUM"
                    }
                  },
                  "example": {
                    "plan": "PREMIUM"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current supplier plan",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/subscripe-premium": {
      "post": {
        "description": "Upgrades the supplier account to the premium plan. Throws error if already on premium.",
        "operationId": "SupplierController_subscripePremium",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully subscribed to premium plan.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully subscribed to the premium plan."
                    },
                    "plan": {
                      "type": "string",
                      "enum": [
                        "BASIC",
                        "PREMIUM"
                      ],
                      "example": "PREMIUM"
                    }
                  },
                  "example": {
                    "message": "Successfully subscribed to the premium plan.",
                    "plan": "PREMIUM"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Supplier is already subscribed to premium.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Supplier is already subscribed to premium.",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Subscribe to premium plan",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/start-free-trail": {
      "post": {
        "description": "Starts the 30-day free trial for the supplier, upgrading to premium plan. Throws error if trial already used.",
        "operationId": "SupplierController_startFreeTrial",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully started free trial.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Free trial started successfully. You are now on the premium plan for 30 days."
                    },
                    "plan": {
                      "type": "string",
                      "enum": [
                        "BASIC",
                        "PREMIUM"
                      ],
                      "example": "PREMIUM"
                    }
                  },
                  "example": {
                    "message": "Free trial started successfully. You are now on the premium plan for 30 days.",
                    "plan": "PREMIUM"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Free trial has already been used.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Free trial has already been used.",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Start free trial",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/me/store-banner": {
      "post": {
        "description": "Uploads a new store banner image for the authenticated supplier and updates their record.<br><strong>Note:</strong> The file must be an image (PNG, JPEG, WebP) and cannot exceed 5MB in size.<br><strong>IMPORTANT:</strong> Please ensure that uploaded images comply with Islamic laws. This means avoiding haram content such as music-related images, depictions of women's bodies (even hands), or any illustrations of living beings (humans, animals, etc.) whether drawn or digital.",
        "operationId": "SupplierController_updateStoreBanner",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Banner image file to upload"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Store banner updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Store banner updated successfully"
                    },
                    "storeBannerFileName": {
                      "type": "string",
                      "example": "banner123-uuid.png"
                    }
                  },
                  "example": {
                    "message": "Store banner updated successfully",
                    "storeBannerFileName": "banner123-uuid.png"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update store banner",
        "tags": [
          "Suppliers"
        ]
      },
      "delete": {
        "description": "Deletes the current banner image for the supplier store.",
        "operationId": "SupplierController_deleteStoreBanner",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Store banner deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Store banner deleted successfully"
                    }
                  },
                  "example": {
                    "message": "Store banner deleted successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "No store banner to delete.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "No store banner to delete.",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete store banner",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/{id}/store-banner": {
      "get": {
        "description": "Retrieves the signed URL of the store banner for a given supplier ID.",
        "operationId": "SupplierController_getStoreBanner",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved store banner URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "storeBannerFileUrl": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://cdn.example.com/banners/banner123.png"
                    }
                  },
                  "example": {
                    "storeBannerFileUrl": "https://cdn.example.com/banners/banner123.png"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No store banner found for this store.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No store banner found for this store.",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get store banner",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers": {
      "get": {
        "description": "Retrieves a list of all suppliers, with optional filters by status (active/inactive) and subscription (subscribed/unsubscribed).",
        "operationId": "SupplierController_getAllSuppliers",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter suppliers by status",
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "type": "string"
            }
          },
          {
            "name": "subscription",
            "required": false,
            "in": "query",
            "description": "Filter suppliers by subscription plan",
            "schema": {
              "enum": [
                "subscribed",
                "unsubscribed"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of suppliers retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupplierResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all suppliers",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/{id}": {
      "get": {
        "description": "Retrieves full supplier data including profile, store, subscription, and favorite categories.",
        "operationId": "SupplierController_getSupplierDataById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique ID of the supplier",
            "schema": {
              "example": "uuid-1234",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Supplier data retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplierResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Supplier with the given ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier with id 9932-we432 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get supplier data by ID",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/suppliers/{id}/store": {
      "get": {
        "description": "Retrieves storefront-specific data for a supplier, suitable for displaying public store pages.",
        "operationId": "SupplierController_getSupplierStoreDataById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique ID of the supplier",
            "schema": {
              "example": "uuid-1234",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Storefront data retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorefrontResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Supplier with the given ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier with id 9932-we432 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get supplier storefront data",
        "tags": [
          "Suppliers"
        ]
      }
    },
    "/categories": {
      "get": {
        "description": "Returns all categories in the system, including nested subcategories. Optionally, filter by `usedFor` (products or services).",
        "operationId": "CategoryController_getAllCategories",
        "parameters": [
          {
            "name": "usedFor",
            "required": false,
            "in": "query",
            "description": "Filter categories by type",
            "schema": {
              "example": "products",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all categories",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": 1,
                      "name": "Agricultural & Pet Supplies",
                      "usedFor": "PRODUCT",
                      "subcategories": [
                        {
                          "id": 2,
                          "name": "Animal Feed",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 3,
                          "name": "Fertilizers",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 4,
                          "name": "Pet Accessories & Toys",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 5,
                          "name": "Pet Food & Treats",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        }
                      ]
                    },
                    {
                      "id": 20,
                      "name": "Software & IT Solutions",
                      "usedFor": "SERVICE",
                      "subcategories": [
                        {
                          "id": 21,
                          "name": "Web & App Development",
                          "usedFor": "SERVICE",
                          "parentCategory": {
                            "id": 20,
                            "name": "Software & IT Solutions"
                          }
                        },
                        {
                          "id": 22,
                          "name": "IT & Cloud Services",
                          "usedFor": "SERVICE",
                          "parentCategory": {
                            "id": 20,
                            "name": "Software & IT Solutions"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get all categories",
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/main": {
      "get": {
        "description": "Returns only the top-level categories (no parent) in the system, optionally filtered by `usedFor`.",
        "operationId": "CategoryController_getMainCategories",
        "parameters": [
          {
            "name": "usedFor",
            "required": false,
            "in": "query",
            "description": "Filter categories by type",
            "schema": {
              "example": "services",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of top-level categories",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": 1,
                      "name": "Agricultural & Pet Supplies",
                      "usedFor": "PRODUCT",
                      "subcategories": [
                        {
                          "id": 2,
                          "name": "Animal Feed",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 3,
                          "name": "Fertilizers",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 4,
                          "name": "Pet Accessories & Toys",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        },
                        {
                          "id": 5,
                          "name": "Pet Food & Treats",
                          "usedFor": "PRODUCT",
                          "parentCategory": {
                            "id": 1,
                            "name": "Agricultural & Pet Supplies"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get main (top-level) categories",
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/sub": {
      "get": {
        "description": "Returns only subcategories (categories that have a parent), optionally filtered by `usedFor`.",
        "operationId": "CategoryController_getSubCategories",
        "parameters": [
          {
            "name": "usedFor",
            "required": false,
            "in": "query",
            "description": "Filter subcategories by type",
            "schema": {
              "example": "products",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of subcategories",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": 2,
                      "name": "Animal Feed",
                      "usedFor": "PRODUCT",
                      "parentCategory": {
                        "id": 1,
                        "name": "Agricultural & Pet Supplies"
                      }
                    },
                    {
                      "id": 3,
                      "name": "Fertilizers",
                      "usedFor": "PRODUCT",
                      "parentCategory": {
                        "id": 1,
                        "name": "Agricultural & Pet Supplies"
                      }
                    },
                    {
                      "id": 21,
                      "name": "Web & App Development",
                      "usedFor": "SERVICE",
                      "parentCategory": {
                        "id": 20,
                        "name": "Software & IT Solutions"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "summary": "Get subcategories",
        "tags": [
          "Categories"
        ]
      }
    },
    "/categories/{id}": {
      "get": {
        "description": "Returns a single category by its ID, including its parent category and all nested subcategories.",
        "operationId": "CategoryController_getCategoryById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "query",
            "description": "The ID of the category to fetch",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "name": "Agricultural & Pet Supplies",
                    "usedFor": "PRODUCT",
                    "subcategories": [
                      {
                        "id": 2,
                        "name": "Animal Feed",
                        "usedFor": "PRODUCT",
                        "parentCategory": {
                          "id": 1,
                          "name": "Agricultural & Pet Supplies"
                        }
                      },
                      {
                        "id": 3,
                        "name": "Fertilizers",
                        "usedFor": "PRODUCT",
                        "parentCategory": {
                          "id": 1,
                          "name": "Agricultural & Pet Supplies"
                        }
                      },
                      {
                        "id": 4,
                        "name": "Pet Accessories & Toys",
                        "usedFor": "PRODUCT",
                        "parentCategory": {
                          "id": 1,
                          "name": "Agricultural & Pet Supplies"
                        }
                      },
                      {
                        "id": 5,
                        "name": "Pet Food & Treats",
                        "usedFor": "PRODUCT",
                        "parentCategory": {
                          "id": 1,
                          "name": "Agricultural & Pet Supplies"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Category not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get category by ID",
        "tags": [
          "Categories"
        ]
      }
    },
    "/products": {
      "get": {
        "description": "Fetches all products. Optional query or header <strong>lang</strong> can be provided to translate product name and description.\n                <ul>\n                    <li>Header: <strong>accept-language</strong></li>\n                    <li>Query: <strong>lang</strong></li>\n                </ul>\n                If no language is provided, defaults to English.",
        "operationId": "ProductController_getAllProducts",
        "parameters": [
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all products",
        "tags": [
          "Products"
        ]
      },
      "post": {
        "description": "<strong>IMPORTANT:</strong> This endpoint requires sending the data as <u>multipart/form-data</u>.<br>\n                <strong>Note:</strong> Because this endpoint uses multipart/form-data, Swagger cannot directly show the CreateProductDto schema here. \n                There is a separate Swagger-only endpoint (GET /swagger-products-reference/create-product-dto) where you can view the full CreateProductDto schema and example.<br><br>\n                You must send two fields:\n                <ul>\n                    <li><strong>dto</strong> (type: text) → JSON string of the product details (see example below). \n                    <br>Check the Swagger-only endpoint for full schema reference.</li>\n                    <li><strong>files</strong> → one or more image files (PNG, JPEG, WebP, max 5MB each, 1 to 3 files)</li>\n                </ul>\n                Make sure the JSON string is properly formatted.<br><br>\n                Only subcategories can be assigned to products. Main categories are invalid.",
        "operationId": "ProductController_createProduct",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "description": "Product images. 1 to 3 images allowed, formats: PNG, JPEG, WebP, max 5MB each."
                    }
                  },
                  "dto": {
                    "type": "string",
                    "description": "IMPORTANT: Must be a JSON string containing product details. The JSON structure should follow CreateProductDto format. Check the Swagger-only endpoint GET /swagger-products-reference/create-product-dto to see the full schema and example.",
                    "example": "{\"name\":\"Classic Wooden Hair Brush\",\"description\":\"Durable wooden hair brush with soft bristles, designed for daily styling and gentle scalp massage.\",\"price\":24.99,\"stock\":150,\"categoryId\":21,\"caseQuantity\":12,\"minOrderQuantity\":1,\"maxOrderQuantity\":10,\"allowGroupPurchase\":true,\"minGroupOrderQuantity\":5,\"groupPurchasePrice\":19.99,\"groupPurchaseDuration\":\"FIVE_DAYS\",\"isPublished\":true}"
                  }
                },
                "required": [
                  "files",
                  "dto"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Could be invalid JSON, missing fields, invalid category, or file issues.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid JSON in form field OR Products must be assigned to a subcategory, not a main category OR At least one product image is required",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier or category not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Create a new product",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{productId}": {
      "get": {
        "description": "Fetches a single product by its ID. Optional query or header <strong>lang</strong> can be provided to translate product name and description.\n                <ul>\n                    <li>Header: <strong>accept-language</strong></li>\n                    <li>Query: <strong>lang</strong></li>\n                </ul>\n                If no language is provided, defaults to English.",
        "operationId": "ProductController_getProductById",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product with id 123 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get product by ID",
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "description": "Updates product fields (except images). Only the fields provided in the request body will be updated. Requires Supplier role.",
        "operationId": "ProductController_updateProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or invalid category",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Products must be assigned to a subcategory, not a main category",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update a product",
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "description": "Soft-deletes a product. Requires Supplier role.",
        "operationId": "ProductController_deleteProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Product deleted successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete a product",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/supplier/{supplierId}": {
      "get": {
        "description": "Fetches all products for a given supplier. Optional query or header <strong>lang</strong> can be provided to translate product name and description.\n                <ul>\n                    <li>Header: <strong>accept-language</strong></li>\n                    <li>Query: <strong>lang</strong></li>\n                </ul>\n                If no language is provided, defaults to English.",
        "operationId": "ProductController_getAllSupplierProducts",
        "parameters": [
          {
            "name": "souplierId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supplier products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all products of a supplier",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/create-product-dto": {
      "get": {
        "deprecated": true,
        "description": "⚠️ IMPORTANT: This endpoint is a Swagger-only reference and does NOT exist in the real API.<br>\n            It is here solely so you can view the full CreateProductDto schema and example in the Swagger Schemas panel.<br>\n            You cannot actually call this endpoint, doing so will return nothing if attempted.<br><br>\n            Why does this exist?<br>\n            The real \"Create Product\" endpoint uses multipart/form-data to accept files and a JSON string,\n            which means Swagger cannot automatically show the CreateProductDto schema for that endpoint.<br>\n            This fake endpoint is a workaround to let you inspect the expected JSON structure, see required fields, \n            and understand how to format your requests when sending the 'dto' field as a JSON string in the real API.<br><br>\n            Use this purely as a reference to know:<br>\n            - All required and optional fields<br>\n            - Field types and valid values<br>\n            - Example data for testing<br><br>\n            DO NOT use this in your frontend code or try to send requests to it.<br>\n            Always send product data as a JSON string in the 'dto' field of the real multipart/form-data endpoint.",
        "operationId": "ProductController_dummy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Fake body showing CreateProductDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This endpoint returns nothing"
          }
        },
        "summary": "⚠️ ONLY for Swagger reference: shows CreateProductDto schema",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{productId}/clone": {
      "post": {
        "description": "Creates a copy of an existing product. The duplicated product is unpublished by default. Requires Supplier role.",
        "operationId": "ProductController_duplicateProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Duplicated product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Original product or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Duplicate a product",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{productId}/images": {
      "patch": {
        "description": "This endpoint allows the supplier to add an additional image to an already created product.<br>\n            Only the image is updated; product name, description, and other fields remain unchanged.<br>\n            Maximum 3 images per product are allowed.",
        "operationId": "ProductController_updateProductImages",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The product image file (PNG, JPEG, WebP, max 5MB)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The product with the newly added image is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or maximum image limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "A maximum of 3 product images is allowed",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier or product not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Add a new image to an existing product",
        "tags": [
          "Products"
        ]
      }
    },
    "/products/{productId}/image/{fileName}": {
      "delete": {
        "description": "Deletes a single image of a product. Requires at least one image to remain. Requires Supplier role.",
        "operationId": "ProductController_deleteProductImage",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated product details after deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (image not found or would leave product empty)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "A product must have at least one image.",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Product or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Product not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete a specific product image",
        "tags": [
          "Products"
        ]
      }
    },
    "/services": {
      "get": {
        "description": "Fetches all services. Optional query or header <strong>lang</strong> can be provided to translate service name and description.\n                <ul>\n                    <li>Header: <strong>accept-language</strong></li>\n                    <li>Query: <strong>lang</strong></li>\n                </ul>\n                Defaults to English if not provided.",
        "operationId": "ServiceController_getAllServices",
        "parameters": [
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all services",
        "tags": [
          "Services"
        ]
      },
      "post": {
        "description": "<strong>IMPORTANT:</strong> This endpoint requires sending the data as <u>multipart/form-data</u>.<br>\n                <strong>Note:</strong> Because this endpoint uses multipart/form-data, Swagger cannot directly show the CreateServiceDto schema here. \n                There is a separate Swagger-only endpoint (GET /create-service-dto) where you can view the full CreateServiceDto schema and example.<br><br>\n                You must send two fields:\n                <ul>\n                    <li><strong>dto</strong> (type: text) → JSON string of the service details (see example below). \n                        <br>Check the Swagger-only endpoint for full schema reference.</li>\n                    <li><strong>files</strong> → one or more image files (PNG, JPEG, WebP, max 5MB each, 1 to 10 files)</li>\n                </ul>\n                Only categories with <strong>usedFor=SERVICE</strong> can be assigned to services.",
        "operationId": "ServiceController_createService",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "description": "Service images. 1 to 10 images allowed, formats: PNG, JPEG, WebP, max 5MB each."
                    }
                  },
                  "dto": {
                    "type": "string",
                    "description": "IMPORTANT: Must be a JSON string containing service details. The JSON structure should follow CreateServiceDto format. Check the Swagger-only endpoint GET /create-service-dto to see the full schema and example.",
                    "example": "{\"name\":\"Home Cleaning Service\",\"description\":\"Professional cleaning service for residential spaces.\",\"price\":99.99,\"isPriceNegotiable\":false,\"categoryId\":12,\"serviceAvailability\":[\"MONDAY\",\"WEDNESDAY\"],\"isPublished\":true}"
                  }
                },
                "required": [
                  "files",
                  "dto"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (JSON, category, or file issues)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid JSON in form field OR Category not valid for services OR At least one service image is required",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier or category not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Create a new service",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{serviceId}": {
      "get": {
        "description": "Fetches a single service by its ID. Optional query or header <strong>lang</strong> can be provided to translate service name and description.\n                Defaults to English if not provided.",
        "operationId": "ServiceController_getServiceById",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service with id 123 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get service by ID",
        "tags": [
          "Services"
        ]
      },
      "patch": {
        "description": "Updates service fields (except images). Only provided fields will be updated. Requires Supplier role.",
        "operationId": "ServiceController_updateService",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or invalid category",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Services must be assigned to a subcategory, not a main category",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update a service",
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "description": "Soft-deletes a service. Requires Supplier role.",
        "operationId": "ServiceController_deleteService",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion confirmation",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Service deleted successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete a service",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/supplier/{supplierId}": {
      "get": {
        "description": "Fetches all services for a given supplier. Optional query or header <strong>lang</strong> can be provided to translate service name and description.",
        "operationId": "ServiceController_getAllSupplierServices",
        "parameters": [
          {
            "name": "souplierId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept-language",
            "required": false,
            "in": "header",
            "description": "Optional header to specify target language for translation (ar or en)",
            "schema": {
              "type": "string",
              "enum": [
                "ar",
                "en"
              ]
            }
          },
          {
            "name": "lang",
            "required": false,
            "in": "query",
            "description": "Target language for translation",
            "schema": {
              "enum": [
                "ar",
                "en"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supplier services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceResponseDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Supplier not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all services of a supplier",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/create-service-dto": {
      "get": {
        "deprecated": true,
        "description": "⚠️ Swagger-only reference for CreateServiceDto schema. \n            This endpoint does not exist in the real API. Check the JSON structure for 'dto' in the multipart/form-data POST /services endpoint.",
        "operationId": "ServiceController_dummy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Fake body showing CreateServiceDto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This endpoint returns nothing"
          }
        },
        "summary": "⚠️ ONLY for Swagger reference: shows CreateServiceDto schema",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{serviceId}/clone": {
      "post": {
        "description": "Creates a copy of an existing service. The duplicated service is unpublished by default. Requires Supplier role.",
        "operationId": "ServiceController_duplicateService",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Duplicated service details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Original service or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Duplicate a service",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{serviceId}/images": {
      "patch": {
        "description": "This endpoint allows the supplier to add an additional image to an already created service.<br>\n            Only the image is updated; other fields remain unchanged.<br>\n            Maximum 3 images per service are allowed.",
        "operationId": "ServiceController_updateServiceImages",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Service image file (PNG, JPEG, WebP, max 5MB)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service with newly added image returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed or max image limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "A maximum of 3 service images is allowed",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Add a new image to an existing service",
        "tags": [
          "Services"
        ]
      }
    },
    "/services/{serviceId}/image/{fileName}": {
      "delete": {
        "description": "Deletes a single image of a service. Requires at least one image to remain. Requires Supplier role.",
        "operationId": "ServiceController_deleteServiceImage",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated service details after deletion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request (image not found or would leave service empty)",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "A service must have at least one image.",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden: You do not have access to this resource (role mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 403,
                    "message": "You do not have access to this resource",
                    "error": "Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service or supplier not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Service not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete a specific service image",
        "tags": [
          "Services"
        ]
      }
    }
  },
  "info": {
    "title": "Silah Backend API Documentation",
    "description": "Use this documentation to explore, test, and understand the available API endpoints, their request/response structure, and any required parameters such as headers, cookies, or authentication tokens.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "crn": {
            "type": "string",
            "example": "1234567890"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp"
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "nid": {
            "type": "string",
            "example": "0987654321"
          },
          "categories": {
            "example": [
              "Home & Living",
              "Technical & Repair Services"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agreedToTerms": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "email",
          "password",
          "name",
          "crn",
          "businessName",
          "city",
          "nid",
          "categories",
          "agreedToTerms"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password to replace the old one.",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "UserResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "clv70z13w0000unqoj4lcr8x4"
          },
          "tapCustomerId": {
            "type": "string",
            "example": "cus_13gdft5"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "crn": {
            "type": "string",
            "example": "1234567890"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp"
          },
          "role": {
            "type": "string",
            "enum": [
              "GUEST",
              "SUPPLIER",
              "BUYER"
            ],
            "example": "BUYER"
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "pfpFileName": {
            "type": "string",
            "example": "moon-3263ec71-3e92-441d-aadd-a57b4a99b2e2.jpeg",
            "description": "Profile picture file name in R2 bucket."
          },
          "pfpUrl": {
            "type": "string",
            "example": "https://gp-silah.d025be9440ae5eb8295c69a36497276a.r2.cloudflarestorage.com/gp-silah/moon.jpeg-30510246-41f7-4cff-a052-78bcc30f7301.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=...&X-Amz-Date=20250816T131236Z&X-Amz-Expires=3600&X-Amz-Signature=...",
            "description": "Signed URL from R2. Signed URLs expire 1 hour after creation.",
            "format": "uri"
          },
          "categories": {
            "example": [
              {
                "id": 5,
                "name": "Home & Living"
              },
              {
                "id": 14,
                "name": "Technical & Repair Services"
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isEmailVerified": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-07-04T7:31:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-07-05T14:48:00.000Z"
          }
        },
        "required": [
          "id",
          "tapCustomerId",
          "name",
          "email",
          "crn",
          "businessName",
          "role",
          "city",
          "pfpFileName",
          "pfpUrl",
          "categories",
          "isEmailVerified",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 25
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "newPassword": {
            "type": "string",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp",
            "maxLength": 50
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "categories": {
            "description": "List of category IDs (use IDs, not names).",
            "example": [
              5,
              14
            ],
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        }
      },
      "CardDetailsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Internal database ID of the card",
            "example": "f1a2b3c4-d5e6-7890-ab12-34567890cdef"
          },
          "tapCardId": {
            "type": "string",
            "description": "Tap payment gateway card ID",
            "example": "card_abc123xyz"
          },
          "cardHolderName": {
            "type": "string",
            "description": "Name of the card holder",
            "example": "Norah Alqahtani"
          },
          "last4": {
            "type": "string",
            "description": "Last 4 digits of the card",
            "example": "4242"
          },
          "brand": {
            "type": "string",
            "description": "Brand of the card (e.g., Visa, Mastercard)",
            "example": "Visa"
          },
          "expMonth": {
            "type": "number",
            "description": "Expiration month of the card (1-12)",
            "example": 12
          },
          "expYear": {
            "type": "number",
            "description": "Expiration year of the card (4-digit)",
            "example": 2028
          }
        },
        "required": [
          "id",
          "tapCardId",
          "cardHolderName",
          "last4",
          "brand",
          "expMonth",
          "expYear"
        ]
      },
      "BuyerResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponseDTO"
          },
          "card": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardDetailsDto"
              }
            ]
          }
        },
        "required": [
          "user",
          "card"
        ]
      },
      "CreateCardDto": {
        "type": "object",
        "properties": {
          "tokenId": {
            "type": "string",
            "description": "Tap token id received from the frontend after card tokenization process (using Tap's Card SDK)",
            "example": "tok_TS57A39251831Q2B15Ro8l180"
          },
          "cardId": {
            "type": "string",
            "description": "Tap card id received from the frontend after card tokenization process (using Tap's Card SDK)",
            "example": "card_TS50A42252049msSJ23MV8k170"
          }
        },
        "required": [
          "tokenId",
          "cardId"
        ]
      },
      "SupplierResponseDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserResponseDTO"
          },
          "supplierId": {
            "type": "string",
            "description": "Supplier unique ID",
            "example": "uuid-1234"
          },
          "supplierName": {
            "type": "string",
            "description": "Supplier display name",
            "example": "John Doe"
          },
          "supplierEmail": {
            "type": "string",
            "description": "Supplier email",
            "example": "john@gmail.com"
          },
          "businessName": {
            "type": "string",
            "description": "Business name of the user",
            "example": "John Bakery"
          },
          "city": {
            "type": "string",
            "description": "City of the user",
            "example": "Riyadh"
          },
          "storeStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ],
            "description": "Current store status",
            "example": "OPEN"
          },
          "storeClosedMsg": {
            "type": "string",
            "description": "Message displayed if the store is closed",
            "example": "We are closed for Eid holidays."
          },
          "storeBio": {
            "type": "string",
            "description": "Short bio or description of the store",
            "example": "We specialize in handmade bakery items."
          },
          "storeBannerFileName": {
            "type": "string",
            "description": "File name of the store banner image in R2 bucket",
            "example": "banner123-6963ac71-3e92-441d-badd-a57b4a99b2e5.png"
          },
          "storeBannerFileUrl": {
            "type": "string",
            "description": "Signed URL from R2. Signed URLs expire 1 hour after creation.",
            "example": "https://cdn.example.com/banners/banner123.png",
            "format": "uri"
          },
          "deliveryFees": {
            "type": "number",
            "description": "Delivery fees charged by the supplier",
            "example": 15.5
          },
          "avgRating": {
            "type": "number",
            "description": "Average rating of the supplier",
            "example": 4.5
          },
          "ratingsCount": {
            "type": "number",
            "description": "Number of ratings received",
            "example": 23
          },
          "usedFreeTrail": {
            "type": "boolean",
            "description": "Indicates if the supplier used the free trial",
            "example": true
          },
          "supplierStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "Current status of the supplier account",
            "example": "ACTIVE"
          },
          "plan": {
            "type": "string",
            "enum": [
              "BASIC",
              "PREMIUM"
            ],
            "description": "Current plan of the supplier",
            "example": "PREMIUM"
          },
          "favoriteCategories": {
            "description": "List of favorite categories (only subcategories) for quick access",
            "example": [
              {
                "id": 16,
                "name": "Animal Feed"
              },
              {
                "id": 33,
                "name": "Jewelry & Watches"
              }
            ],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "user",
          "supplierId",
          "supplierName",
          "supplierEmail",
          "businessName",
          "city",
          "storeStatus",
          "storeClosedMsg",
          "deliveryFees",
          "avgRating",
          "ratingsCount",
          "usedFreeTrail",
          "supplierStatus",
          "plan"
        ]
      },
      "UpdateSupplierDto": {
        "type": "object",
        "properties": {
          "storeStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ],
            "description": "Current status of the supplier store",
            "example": "OPEN"
          },
          "storeClosedMsg": {
            "type": "string",
            "description": "Custom message displayed when the store is closed",
            "example": "We are closed for Eid holidays."
          },
          "storeBio": {
            "type": "string",
            "description": "Short bio or description of the store",
            "example": "We specialize in handmade bakery items."
          },
          "deliveryFees": {
            "type": "number",
            "description": "Delivery fees charged by the supplier",
            "example": 15.5
          }
        },
        "required": [
          "storeStatus"
        ]
      },
      "StorefrontResponseDto": {
        "type": "object",
        "properties": {
          "supplierId": {
            "type": "string",
            "description": "Supplier unique ID",
            "example": "uuid-1234"
          },
          "supplierName": {
            "type": "string",
            "description": "Supplier display name",
            "example": "John Doe"
          },
          "supplierEmail": {
            "type": "string",
            "description": "Supplier email",
            "example": "john@gmail.com"
          },
          "businessName": {
            "type": "string",
            "description": "Business name of the user",
            "example": "John Bakery"
          },
          "city": {
            "type": "string",
            "description": "City of the user",
            "example": "Riyadh"
          },
          "storeStatus": {
            "type": "string",
            "enum": [
              "OPEN",
              "CLOSED"
            ],
            "description": "Current store status",
            "example": "OPEN"
          },
          "storeClosedMsg": {
            "type": "string",
            "description": "Message displayed if the store is closed",
            "example": "We are closed for Eid holidays."
          },
          "storeBio": {
            "type": "string",
            "description": "Short bio or description of the store",
            "example": "We specialize in handmade bakery items."
          },
          "storeBannerFileName": {
            "type": "string",
            "description": "File name of the store banner image in R2 bucket",
            "example": "banner123-6963ac71-3e92-441d-badd-a57b4a99b2e5.png"
          },
          "storeBannerFileUrl": {
            "type": "string",
            "description": "Signed URL from R2. Signed URLs expire 1 hour after creation.",
            "example": "https://cdn.example.com/banners/banner123.png",
            "format": "uri"
          },
          "deliveryFees": {
            "type": "number",
            "description": "Delivery fees charged by the supplier",
            "example": 15.5
          },
          "avgRating": {
            "type": "number",
            "description": "Average rating of the supplier",
            "example": 4.5
          },
          "ratingsCount": {
            "type": "number",
            "description": "Number of ratings received",
            "example": 23
          },
          "supplierStatus": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ],
            "description": "Current status of the supplier account",
            "example": "ACTIVE"
          }
        },
        "required": [
          "supplierId",
          "supplierName",
          "supplierEmail",
          "businessName",
          "city",
          "storeStatus",
          "storeClosedMsg",
          "deliveryFees",
          "avgRating",
          "ratingsCount",
          "supplierStatus"
        ]
      },
      "ProductResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-1234"
          },
          "supplierId": {
            "type": "object",
            "description": "Supplier ID (null = supplier deleated his account)",
            "example": "uuid-5678"
          },
          "supplier": {
            "description": "Supplier details (null if the supplier deleted his account)",
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierResponseDto"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Wireless Headphones"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Noise-cancelling over-ear headphones"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "example": 199.99
          },
          "stock": {
            "type": "number",
            "description": "Stock available",
            "example": 50
          },
          "category": {
            "type": "object",
            "description": "Category info"
          },
          "imagesFilesNames": {
            "description": "Product images filenames",
            "example": [
              "img1.jpg",
              "img2.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "imagesFilesUrls": {
            "example": [
              "https://gp-silah.d025be9440ae5eb8295c69a36497276a.r2.cloudflarestorage.com/gp-silah/moon.jpeg-30510246-41f7-4cff-a052-78bcc30f7301.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=...&X-Amz-Date=20250816T131236Z&X-Amz-Expires=3600&X-Amz-Signature=..."
            ],
            "description": "Signed URLs from R2. Signed URLs expire 1 hour after creation.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "caseQuantity": {
            "type": "number",
            "description": "Case quantity",
            "example": 1
          },
          "minOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1
          },
          "maxOrderQuantity": {
            "type": "object",
            "description": "Maximum order quantity (null = unlimited)",
            "nullable": true,
            "example": 50
          },
          "allowGroupPurchase": {
            "type": "boolean",
            "description": "Enable group purchase",
            "example": true
          },
          "minGroupOrderQuantity": {
            "type": "number",
            "description": "Minimum group order quantity",
            "nullable": true,
            "example": 5
          },
          "groupPurchasePrice": {
            "type": "number",
            "description": "Group purchase price",
            "nullable": true,
            "example": 149.99
          },
          "groupPurchaseDuration": {
            "type": "string",
            "description": "Group purchase duration (enum)",
            "nullable": true,
            "example": "FIVE_DAYS",
            "enum": [
              "THREE_DAYS",
              "FIVE_DAYS",
              "SEVEN_DAYS"
            ]
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status",
            "example": true
          },
          "wishlistCount": {
            "type": "number",
            "description": "Wishlist count",
            "example": 10
          },
          "avgRating": {
            "type": "number",
            "description": "Average rating",
            "example": 4.5
          },
          "ratingsCount": {
            "type": "number",
            "description": "Ratings count",
            "example": 12
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the product is soft-deleted",
            "example": false
          },
          "deletedAt": {
            "type": "object",
            "description": "Timestamp when the product was soft-deleted (null if not deleted)",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "price",
          "stock",
          "category",
          "imagesFilesNames",
          "imagesFilesUrls",
          "caseQuantity",
          "minOrderQuantity",
          "maxOrderQuantity",
          "allowGroupPurchase",
          "minGroupOrderQuantity",
          "groupPurchasePrice",
          "groupPurchaseDuration",
          "isPublished",
          "wishlistCount",
          "avgRating",
          "ratingsCount",
          "createdAt",
          "updatedAt",
          "isDeleted",
          "deletedAt"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Wireless Headphones",
            "maxLength": 60
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Noise cancelling over-ear headphones",
            "maxLength": 1000
          },
          "price": {
            "type": "number",
            "description": "Product price",
            "example": 199.99
          },
          "stock": {
            "type": "number",
            "description": "Available stock (default = 0)",
            "example": 100
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 1
          },
          "caseQuantity": {
            "type": "number",
            "description": "Case quantity (default = 1)",
            "example": 4
          },
          "minOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity (default = 1)",
            "example": 5
          },
          "maxOrderQuantity": {
            "type": "object",
            "description": "Maximum order quantity (null = unlimited)",
            "example": 50
          },
          "allowGroupPurchase": {
            "type": "boolean",
            "description": "Enable group purchase (default = false)"
          },
          "minGroupOrderQuantity": {
            "type": "number",
            "description": "Minimum group order quantity (required if group purchase is enabled)",
            "example": 10
          },
          "groupPurchasePrice": {
            "type": "number",
            "description": "Group purchase price (required if group purchase is enabled)",
            "example": 149.99
          },
          "groupPurchaseDuration": {
            "type": "string",
            "enum": [
              "THREE_DAYS",
              "FIVE_DAYS",
              "SEVEN_DAYS"
            ],
            "description": "Group purchase duration (enum value)",
            "example": "SEVEN_DAYS"
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status (default = false)"
          }
        },
        "required": [
          "name",
          "description",
          "price",
          "categoryId"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name",
            "maxLength": 60
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "maxLength": 1000
          },
          "price": {
            "type": "number",
            "description": "Product price",
            "example": 199.99
          },
          "stock": {
            "type": "number",
            "description": "Available stock",
            "example": 100
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 1
          },
          "caseQuantity": {
            "type": "number",
            "description": "Case quantity",
            "example": 1
          },
          "minOrderQuantity": {
            "type": "number",
            "description": "Minimum order quantity",
            "example": 1
          },
          "maxOrderQuantity": {
            "type": "object",
            "description": "Maximum order quantity (null = unlimited)",
            "example": 50
          },
          "allowGroupPurchase": {
            "type": "boolean",
            "description": "Enable group purchase",
            "example": false
          },
          "minGroupOrderQuantity": {
            "type": "number",
            "description": "Minimum group order quantity",
            "example": 5
          },
          "groupPurchasePrice": {
            "type": "number",
            "description": "Group purchase price",
            "example": 149.99
          },
          "groupPurchaseDuration": {
            "type": "string",
            "description": "Group purchase duration (enum)",
            "example": "ONE_WEEK",
            "enum": [
              "THREE_DAYS",
              "FIVE_DAYS",
              "SEVEN_DAYS"
            ]
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status",
            "example": false
          }
        }
      },
      "ServiceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Service ID",
            "example": "uuid-1234"
          },
          "supplierId": {
            "type": "object",
            "description": "Supplier ID (null = supplier deleted his account)",
            "example": "uuid-5678"
          },
          "supplier": {
            "description": "Supplier details (null if the supplier deleted his account)",
            "allOf": [
              {
                "$ref": "#/components/schemas/SupplierResponseDto"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Service name",
            "example": "Home Cleaning"
          },
          "description": {
            "type": "string",
            "description": "Service description",
            "example": "Professional deep cleaning service for apartments and houses"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "example": 150
          },
          "isPriceNegotiable": {
            "type": "boolean",
            "description": "Indicates if the price is negotiable",
            "example": true
          },
          "category": {
            "type": "object",
            "description": "Category info"
          },
          "imagesFilesNames": {
            "description": "Service images filenames",
            "example": [
              "cleaning1.jpg",
              "cleaning2.jpg"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "imagesFilesUrls": {
            "example": [
              "https://gp-silah.d025be9440ae5eb8295c69a36497276a.r2.cloudflarestorage.com/gp-silah/service1.jpeg?..."
            ],
            "description": "Signed URLs from R2. Signed URLs expire 1 hour after creation.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "serviceAvailability": {
            "type": "string",
            "description": "Availability details of the service",
            "example": "WEEKENDS",
            "enum": [
              "TWENTY_FOUR_SEVEN",
              "EVERYDAY",
              "WEEKDAYS",
              "WEEKENDS",
              "APPOINTMENT"
            ]
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status",
            "example": true
          },
          "wishlistCount": {
            "type": "number",
            "description": "Wishlist count",
            "example": 7
          },
          "avgRating": {
            "type": "number",
            "description": "Average rating",
            "example": 4.8
          },
          "ratingsCount": {
            "type": "number",
            "description": "Ratings count",
            "example": 25
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the service is soft-deleted",
            "example": false
          },
          "deletedAt": {
            "type": "object",
            "description": "Timestamp when the service was soft-deleted (null if not deleted)",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "price",
          "isPriceNegotiable",
          "category",
          "imagesFilesNames",
          "imagesFilesUrls",
          "serviceAvailability",
          "isPublished",
          "wishlistCount",
          "avgRating",
          "ratingsCount",
          "createdAt",
          "updatedAt",
          "isDeleted",
          "deletedAt"
        ]
      },
      "CreateServiceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name",
            "example": "Home Cleaning",
            "maxLength": 60
          },
          "description": {
            "type": "string",
            "description": "Service description",
            "example": "Professional deep cleaning service for apartments and houses",
            "maxLength": 1000
          },
          "price": {
            "type": "number",
            "description": "Service price",
            "example": 150
          },
          "isPriceNegotiable": {
            "type": "boolean",
            "description": "Indicates if the price is negotiable (default = false)",
            "example": true
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 1
          },
          "serviceAvailability": {
            "type": "string",
            "description": "Availability details of the service",
            "example": "TWENTY_FOUR_SEVEN",
            "enum": [
              "TWENTY_FOUR_SEVEN",
              "EVERYDAY",
              "WEEKDAYS",
              "WEEKENDS",
              "APPOINTMENT"
            ]
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status (default = false)"
          }
        },
        "required": [
          "name",
          "description",
          "price",
          "categoryId",
          "serviceAvailability"
        ]
      },
      "UpdateServiceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name",
            "maxLength": 60
          },
          "description": {
            "type": "string",
            "description": "Service description",
            "maxLength": 1000
          },
          "price": {
            "type": "number",
            "description": "Service price",
            "example": 150
          },
          "isPriceNegotiable": {
            "type": "boolean",
            "description": "Indicates if the price is negotiable",
            "example": true
          },
          "categoryId": {
            "type": "number",
            "description": "Category ID",
            "example": 1
          },
          "serviceAvailability": {
            "type": "string",
            "description": "Availability details of the service",
            "example": "EVERYDAY",
            "enum": [
              "TWENTY_FOUR_SEVEN",
              "EVERYDAY",
              "WEEKDAYS",
              "WEEKENDS",
              "APPOINTMENT"
            ]
          },
          "isPublished": {
            "type": "boolean",
            "description": "Publish status",
            "example": false
          }
        }
      }
    }
  }
}