{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "deprecated": true,
        "description": "This is the default root endpoint generated by NestJS. It returns a static test message and is not part of the real Silah API.",
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A \"Hello, World!\" message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Hello, World!"
                }
              }
            }
          }
        },
        "summary": "Not a usable endpoint",
        "tags": [
          "Default"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "HealthController_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Check API health status",
        "tags": [
          "Health"
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User signed up successfully. JWT sent in cookie.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Signup successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation or conflict",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "These categories are invalid: Cleaning, Laundry",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "NID already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "CRN already exists",
                        "error": "Bad Request"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 400,
                        "message": "Email already exists",
                        "error": "Bad Request"
                      }
                    }
                  ]
                },
                "examples": {
                  "categories": {
                    "summary": "Invalid Categories",
                    "value": {
                      "statusCode": 400,
                      "message": "These categories are invalid: Cleaning, Laundry",
                      "error": "Bad Request"
                    }
                  },
                  "nid": {
                    "summary": "NID already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "NID already exists",
                      "error": "Bad Request"
                    }
                  },
                  "crn": {
                    "summary": "CRN already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "CRN already exists",
                      "error": "Bad Request"
                    }
                  },
                  "email": {
                    "summary": "Email already exists",
                    "value": {
                      "statusCode": 400,
                      "message": "Email already exists",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Registers a new user and returns a JWT token in a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "description": "Either \"email\" or \"crn\" must be provided, but not both.",
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "required": [
                      "email",
                      "password"
                    ],
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "crn",
                      "password"
                    ],
                    "properties": {
                      "crn": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "loginWithEmail": {
                  "summary": "Login using email and password",
                  "value": {
                    "email": "user@example.com",
                    "password": "securePassword123"
                  }
                },
                "loginWithCrn": {
                  "summary": "Login using CRN and password",
                  "value": {
                    "crn": "1234567890",
                    "password": "securePassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Login successful"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request – validation or authentication failure",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user does not exist in the system",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "The email or CRN exists, but the password is incorrect",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid credentials",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Login user and send back JWT token as a cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "application/json": {
                "schema": {
                  "example": "Successfully logged out"
                }
              }
            }
          }
        },
        "summary": "Logout user by clearing token cookie",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/verify-email": {
      "post": {
        "description": "This endpoint should be called when the user clicks the verification button which is after clicking the link in their email.<br> So this endpoint should be called from the `/verify-email` route in the frontend, remember to pass the token as a query parameter (so the link will be `/verify-email?token=`).",
        "operationId": "AuthController_verifyEmail",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "JWT token from email link",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Email verified successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or already verified",
            "content": {
              "application/json": {
                "examples": {
                  "userNotFound": {
                    "summary": "The user not found or already verified",
                    "value": {
                      "statusCode": 400,
                      "message": "User not found or already verified",
                      "error": "Bad Request"
                    }
                  },
                  "invalidCredentials": {
                    "summary": "Invalid or expired token",
                    "value": {
                      "statusCode": 400,
                      "message": "Invalid or expired verification token",
                      "error": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify user email using token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/resend-verification-email": {
      "post": {
        "description": "This endpoint allows users to request a new verification email if they missed the original one or if the token expired. <br>If the you received \"Invalid or expired verification token\" error you should call this endpoint to resend the email. ",
        "operationId": "AuthController_resendVerificationEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Email to resend verification to",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "example@email.com"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification email resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Verification email resent successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Email already verified",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Email already verified",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Resend verification email to user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/request-password-reset": {
      "post": {
        "description": "This endpoint sends a password reset link to the user's email address.<br><br>\n            It is used in two cases:<br>\n            - If the user clicks the \"Forgot Password?\" button.<br>\n            - If the user previously requested a reset link but the 5-minute token has expired.<br><br>\n            Note: The token will only be sent if the email exists and is verified. For security reasons, we always return the same success message, regardless of whether the user exists or is verified.",
        "operationId": "AuthController_requestPasswordReset",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "The email address of the user who wants to reset their password.",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "email": "user@example.com"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reset password email sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Password reset email sent successfully"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send reset password email",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 500,
                    "message": "Failed to send reset password email"
                  }
                }
              }
            }
          }
        },
        "summary": "Request password reset link",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/reset-password": {
      "post": {
        "description": "This endpoint is used after the user clicks the password reset link from their email.<br><br>\n    It should be triggered from the frontend's `/reset-password` route.<br>\n    The token should be passed as a query parameter in the URL.<br><br>\n    The body must include a new password that is between 8 and 28 characters long.",
        "operationId": "AuthController_resetPassword",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The JWT token sent in the reset password email. This must be passed as a query parameter.",
            "schema": {
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new password to set for the user account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Password reset successfully"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired token, or validation error in request body.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Invalid or expired reset password token"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found (after token is verified).",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found"
                  }
                }
              }
            }
          }
        },
        "summary": "Reset user password using token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/switch-role": {
      "patch": {
        "operationId": "AuthController_switchUserRole",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token regenerated with updated role",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Role switched successfully",
                    "newRole": "SUPPLIER"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Unexpected role: GUEST should never reach this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 500,
                    "message": "Unexpected role: GUEST should never reach this endpoint",
                    "error": "Internal Server Error"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Switch user role (BUYER ⇌ SUPPLIER)",
        "tags": [
          "Auth"
        ]
      }
    },
    "/users/email/{email}": {
      "get": {
        "description": "Fetches a single user using their email address.",
        "operationId": "UserController_getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "description": "Email address of the user",
            "schema": {
              "example": "example@email.com",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/crn/{crn}": {
      "get": {
        "description": "Fetches a user using their unique CRN.",
        "operationId": "UserController_getUserByCRN",
        "parameters": [
          {
            "name": "crn",
            "required": true,
            "in": "path",
            "description": "Customer Registration Number of the user",
            "schema": {
              "example": "0123456789",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user by their CRN",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/name": {
      "get": {
        "description": "Returns a list of users that match the provided name.",
        "operationId": "UserController_getUserByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "query",
            "description": "Name (or partial name) to search users by",
            "schema": {
              "example": "Sarah",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "Name parameter is required",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No users found with the name",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Returns the currently authenticated user's data.",
        "operationId": "UserController_getCurrentUserData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current user data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Get current user",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates the currently authenticated user's profile information.",
        "operationId": "UserController_updateCurrentUserData",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "User data to update (you don't have to not send all fields, only the ones you want to change will be updated).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "These categories are invalid: Hi, LOL",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update current user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/profile-picture": {
      "post": {
        "description": "Uploads a new profile picture for the authenticated user and updates their record. Replaces the previous picture if it exists.<br><strong>Note:</strong> The file must be an image (PNG, JPEG, WebP) and cannot exceed 5MB in size.<br><strong>IMPORTANT:</strong> Please ensure that uploaded images comply with Islamic laws. This means avoiding haram content such as music-related images, depictions of women's bodies (even hands), or any illustrations of living beings (humans, animals, etc.) whether drawn or digital.",
        "operationId": "UserController_updateProfilePicture",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Profile picture file to upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Profile picture updated successfully",
                    "pfpFileName": "user-avatar/12345.png"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. File missing or invalid format.",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "No file provided or invalid file type",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found or profile picture cannot be updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "User not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Update user profile picture",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Deletes the authenticated user's current profile picture and replaces it with a default avatar.",
        "operationId": "UserController_deleteProfilePicture",
        "parameters": [
          {
            "name": "Cookie",
            "in": "header",
            "description": "JWT token must be set in the cookie named \"token\". Example: token=your_jwt_token_here",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "message": "Profile picture deleted successfully"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Token missing or invalid/expired.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "No token found in cookies",
                        "error": "Unauthorized"
                      }
                    },
                    {
                      "example": {
                        "statusCode": 401,
                        "message": "Invalid or expired token",
                        "error": "Unauthorized"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found or already has the default profile picture",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Profile picture not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "cookie": []
          },
          {
            "cookie": []
          },
          {
            "bearer": []
          },
          {
            "token": []
          }
        ],
        "summary": "Delete current user profile picture",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/profile-picture": {
      "get": {
        "description": "Retrieves the URL of a user's profile picture that is stored on R2. Throws a 404 error if the user or their profile picture does not exist.",
        "operationId": "UserController_getUserProfilePictureUrl",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID of the user whose profile picture URL is being retrieved",
            "schema": {
              "example": "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture URL retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "pfpUrl": "https://cdn.example.com/pfp/USER_ID.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250101T000000Z&X-Amz-Expires=3600&X-Amz-Signature=REDACTED"
                  }
                }
              }
            }
          },
          "404": {
            "description": "User or profile picture not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Profile picture not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get user's profile picture URL",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/profile-pictures/batch": {
      "post": {
        "description": "Retrieves the profile picture URLs for multiple users by their IDs. Only valid UUIDs are considered.",
        "operationId": "UserController_getUsersProfilePicturesUrls",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Array of user IDs to retrieve profile picture URLs for",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "example": [
                      "a3e1c9f0-1234-5678-90ab-1c2d3e4f5678",
                      "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789"
                    ]
                  }
                },
                "required": [
                  "ids"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture URLs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "a3e1c9f0-1234-5678-90ab-1c2d3e4f5678",
                      "pfpUrl": "https://cdn.example.com/pfp/USER_ID.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250101T000000Z&X-Amz-Expires=3600&X-Amz-Signature=REDACTED"
                    },
                    {
                      "id": "b4f2d8c1-9876-5432-10ba-2f3e4d5c6789",
                      "pfpUrl": null
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 400,
                    "message": "No user IDs provided",
                    "error": "Bad Request"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "No users found with the provided IDs",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "summary": "Get profile pictures for multiple users",
        "tags": [
          "Users"
        ]
      }
    },
    "/buyers/me": {
      "get": {
        "operationId": "BuyerController_getCurrentBuyerData",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/me/card": {
      "get": {
        "operationId": "BuyerController_getCurrentBuyerCard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      },
      "put": {
        "operationId": "BuyerController_saveOrReplaceCurrentBuyerCard",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/wishlist": {
      "get": {
        "operationId": "BuyerController_getWishlist",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      }
    },
    "/buyers/wishlist/{itemId}": {
      "post": {
        "operationId": "BuyerController_addToWishlist",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      },
      "delete": {
        "operationId": "BuyerController_removeFromWishlist",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Buyers"
        ]
      }
    }
  },
  "info": {
    "title": "Silah Backend API Documentation",
    "description": "Use this documentation to explore, test, and understand the available API endpoints, their request/response structure, and any required parameters such as headers, cookies, or authentication tokens.",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "in": "cookie",
        "name": "token"
      }
    },
    "schemas": {
      "SignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "crn": {
            "type": "string",
            "example": "1234567890"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp"
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "nid": {
            "type": "string",
            "example": "0987654321"
          },
          "categories": {
            "example": [
              "Home & Living",
              "Technical & Repair Services"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "agreedToTerms": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "email",
          "password",
          "name",
          "crn",
          "businessName",
          "city",
          "nid",
          "categories",
          "agreedToTerms"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "The new password to replace the old one.",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "UserResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "clv70z13w0000unqoj4lcr8x4"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "crn": {
            "type": "string",
            "example": "1234567890"
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp"
          },
          "role": {
            "type": "string",
            "enum": [
              "GUEST",
              "SUPPLIER",
              "BUYER"
            ],
            "example": "BUYER"
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "pfpFileName": {
            "type": "string",
            "example": "moon-3263ec71-3e92-441d-aadd-a57b4a99b2e2.jpeg",
            "description": "Profile picture file name in R2 bucket."
          },
          "pfpUrl": {
            "type": "string",
            "example": "https://gp-silah.d025be9440ae5eb8295c69a36497276a.r2.cloudflarestorage.com/gp-silah/moon.jpeg-30510246-41f7-4cff-a052-78bcc30f7301.jpeg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=...&X-Amz-Date=20250816T131236Z&X-Amz-Expires=3600&X-Amz-Signature=...",
            "description": "Example of a signed URL from R2. Signed URLs expire 1 hour after creation.",
            "format": "uri"
          },
          "categories": {
            "example": [
              "Home & Living",
              "Technical & Repair Services"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isEmailVerified": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-07-04T7:31:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "example": "2025-07-05T14:48:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "crn",
          "businessName",
          "role",
          "city",
          "pfpFileName",
          "pfpUrl",
          "categories",
          "isEmailVerified",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe",
            "maxLength": 25
          },
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "newPassword": {
            "type": "string",
            "example": "StrongPass123",
            "minLength": 8,
            "maxLength": 28
          },
          "businessName": {
            "type": "string",
            "example": "Acme Corp",
            "maxLength": 50
          },
          "city": {
            "type": "string",
            "example": "Riyadh"
          },
          "categories": {
            "example": [
              "Home & Living",
              "Technical & Repair Services"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}